{"version":3,"sources":["components/Grid/Grid.js","App.js","CheckIP.js","reportWebVitals.js","index.js"],"names":["Grid","vImgs","vImgsSet","Set","imgNums","j","firstJPGRun","has","push","extension","imgs","i","className","src","placeholder","process","loading","style","filter","alt","shuffledImgs","map","x","shuffle","App","checkIP","props","d","Date","$","getJSON","value","ip","location","data","id","uuid","time","zipCode","zip_code","lat","latitude","long","longitude","ajax","url","type","JSON","stringify","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA+DeA,MA3Df,WAaI,IAXA,IAMMC,EAAQ,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACtGC,EAAW,IAAIC,IAAIF,GAGrBG,EAAUH,EACNI,EAAI,EAAGA,EARCC,IAQYD,GAAG,EACtBH,EAASK,IAAIF,IACdD,EAAQI,KAAKH,GAOrB,IAFA,IACII,EADAC,EAAO,CAAC,GAAG,GAAG,IAETC,EAAE,EAAGA,EAjBEL,IAiBWK,GAAG,EAEtBF,EADCL,EAAQO,IArBG,IAqBoBP,EAAQO,GAAKL,GACjC,MAGA,MAEhBI,EAAKC,EAAE,GAAGH,KACN,qBAAKI,UAAU,MAAf,SACI,cAAC,IAAD,CACIC,IAAG,mDAA8CT,EAAQO,GAAtD,YAA4DF,GAC/DK,YAAaC,GAAA,wBAA0CX,EAAQO,GAAlD,YAAwDF,GAFzE,SAGK,SAACI,EAAKG,GAAN,OACG,qBAAKC,MAAO,CAAEC,OAAQF,EAAU,YAAc,WAAaH,IAAKA,EAAKM,IAAI,iBAL3DR,IAalC,IAAMS,EAAeV,EAAKW,KAAI,SAAAC,GAAC,OAAIC,IAAQD,MAC3C,OACI,sBAAKV,UAAU,OAAf,UACI,qBAAKA,UAAU,SAAf,SACKQ,EAAa,KAElB,qBAAKR,UAAU,SAAf,SACKQ,EAAa,KAElB,qBAAKR,UAAU,SAAf,SACKQ,EAAa,S,MC5CfI,MAVf,WACE,OACE,mCACA,qBAAKZ,UAAU,MAAf,SACE,cAAE,EAAF,S,yFCHea,E,kDACnB,WAAYC,GAAQ,uCACZA,G,6LAIAC,EAAI,IAAIC,K,SACMC,IAAEC,QAAQ,uB,cAAxBC,E,gBACiBF,IAAEC,QAAS,8BAA+BC,EAAMC,I,cAAjEC,E,OACAC,EAAO,CACXC,GAAGC,MACHJ,GAAID,EAAMC,GACVK,KAAMV,EACNW,QAASL,EAASM,SAClBC,IAAKP,EAASQ,SACdC,KAAMT,EAASU,W,UAEXd,IAAEe,KAAK,CAACC,IAAK,kGAAkGC,KAAM,MAAMZ,KAAMa,KAAKC,UAAUd,K,iIAIrJ,OAAO,S,GArByBe,IAAMC,WCQ5BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BJ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,YAM1Bb,M","file":"static/js/main.c2403483.chunk.js","sourcesContent":["import './Grid.scss';\nimport ProgressiveImage from \"react-progressive-image\";\nimport shuffle from 'lodash/shuffle';\n\nfunction Grid() {\n    //hard-coded\n    const firstJPGRun = 62;\n    const firstPNGRun = 13;\n    const secondJPGRun = 25;\n    const numImgs = firstJPGRun + firstPNGRun + secondJPGRun;\n\n    //list of vertical-orientation image indexes (i took \"5\" out last time, can replace back if uneven)\n    const vImgs = [7,8,9,12,15,25,28,31,36,40,42,46,48,52,53,54,59,62,63,66,67,68,70,71,72,74,77,83,85,86,89,98,99];\n    const vImgsSet = new Set(vImgs)\n\n    //list of all image nums with vertical images first\n    let imgNums = vImgs;\n    for(let j = 0; j < numImgs; j+=1){\n        if (!vImgsSet.has(j)) {\n            imgNums.push(j)\n        }\n    }\n\n    // three-column display for desktop\n    let imgs = [[],[],[]]\n    let extension;\n    for (let i=0; i < numImgs; i+=1){\n        if ((imgNums[i] >= firstJPGRun) && (imgNums[i] < firstJPGRun + firstPNGRun)) {\n            extension = 'png';\n        }\n        else {\n            extension = 'jpg';\n        }\n        imgs[i%3].push(\n            <div className=\"pod\" key={i}> \n                <ProgressiveImage\n                    src={`https://ethansitephotos.s3.amazonaws.com/${imgNums[i]}.${extension}`} \n                    placeholder={process.env.PUBLIC_URL + `/placeholders/${imgNums[i]}.${extension}`}>\n                    {(src, loading) => (\n                        <img style={{ filter: loading ? \"blur(5px)\" : \"blur(0)\" }} src={src} alt=\"projects\" />\n                    )}\n                </ProgressiveImage>\n            </div>\n        )\n    }\n\n    // shuffle the image order in each column\n    const shuffledImgs = imgs.map(x => shuffle(x))\n    return (\n        <div className=\"grid\">\n            <div className=\"column\">\n                {shuffledImgs[0]}\n            </div>\n            <div className=\"column\">\n                {shuffledImgs[1]}\n            </div>\n            <div className=\"column\">\n                {shuffledImgs[2]}\n            </div>\n        </div>\n    );\n}\n\nexport default Grid;\n","import Grid from './components/Grid/Grid';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <>\n    <div className=\"App\">\n      < Grid />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport $ from 'jquery';\nimport uuid from 'react-uuid'\n\nexport default class checkIP extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  async componentDidMount() {\n    const d = new Date()\n    const value = await $.getJSON('https://jsonip.com/');\n    const location = await $.getJSON(('https://freegeoip.app/json/'+ value.ip));\n    const data = {\n      id:uuid(),\n      ip: value.ip,\n      time: d,\n      zipCode: location.zip_code,\n      lat: location.latitude,\n      long: location.longitude,\n    }\n    await $.ajax({url: 'https://wvbfaxk2n2.execute-api.us-east-1.amazonaws.com/Test?id=hi&ip=test&time=sdf&lat=o&long=o',type: 'PUT',data: JSON.stringify(data)});\n  }\n\n  render(){\n     return null;\n   }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CheckIP from './CheckIP';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <CheckIP />\n  </React.StrictMode>,\n  document.getElementById('CheckIP')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}